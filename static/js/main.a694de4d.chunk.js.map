{"version":3,"sources":["components/Nav/Nav.js","components/CharacterCard/CharacterCard.js","components/Container/Container.js","components/Header/Header.js","components/Footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Nav","props","react_default","a","createElement","className","href","brand","winLose","score","topScore","CharacterCard","value","id","onClick","handleClick","alt","name","src","image","Container","children","Header","h1","h2","Footer","shuffleCards","array","i","length","j","Math","floor","random","_ref","App","state","characters","clicked","_this","indexOf","handleScore","setState","concat","handleReset","newScore","handleShuffle","shuffledCards","_this2","this","components_Nav_Nav","components_Header_Header","components_Container_Container","map","character","components_CharacterCard_CharacterCard","removeCharacter","key","components_Footer_Footer","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"siDAaeA,SAVH,SAAAC,GAAK,OACjBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACfH,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAAQH,EAAAC,EAAAC,cAAA,KAAGE,KAAK,KAAKL,EAAMM,QACzCL,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAaJ,EAAMO,SACjCN,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAAd,UAA8BJ,EAAMQ,MAApC,iBAAyDR,EAAMS,cCIpDC,SATO,SAAAV,GAAK,OACzBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOO,MAAOX,EAAMY,GACnCC,QAAS,kBAAMb,EAAMc,YAAYd,EAAMY,MACrCX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,OAAKY,IAAKf,EAAMgB,KAAMC,IAAKjB,EAAMkB,YCFxBC,SAFG,SAAAnB,GAAK,OAAIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAaJ,EAAMoB,YCM9CC,SANA,SAAArB,GAAK,OACpBC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,UAClBH,EAAAC,EAAAC,cAAA,UAAKH,EAAMsB,IACXrB,EAAAC,EAAAC,cAAA,UAAKH,EAAMuB,cCIIC,SAPA,SAAAxB,GAAK,OACpBC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,UAClBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAUJ,EAAMoB,SAC/BnB,EAAAC,EAAAC,cAAA,OAAKY,IAAKf,EAAMe,IAAKE,IAAKjB,EAAMiB,gBCKhC,SAASQ,EAAaC,GACpB,IAAK,IAAIC,EAAID,EAAME,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACzC,IAAIE,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADCM,EAElB,CAACP,EAAMG,GAAIH,EAAMC,IAAvCD,EAAMC,GAFkCM,EAAA,GAE9BP,EAAMG,GAFwBI,EAAA,GAI3C,OAAOP,MAiGMQ,6MA5FbC,MAAQ,CACNC,aACA5B,MAAO,EACPC,SAAU,EACV4B,QAAS,GACT9B,QAAS,MASXO,YAAc,SAAAF,IAC4B,IAApC0B,EAAKH,MAAME,QAAQE,QAAQ3B,IAC7B0B,EAAKE,cACLF,EAAKG,SAAS,CACZJ,QAASC,EAAKH,MAAME,QAAQK,OAAO9B,MAGrC0B,EAAKK,iBAKTH,YAAc,WACZ,IAAMI,EAAWN,EAAKH,MAAM3B,MAAQ,EACpC8B,EAAKG,SAAS,CACZjC,MAAOoC,EACPrC,QAAS,KAEPqC,GAAYN,EAAKH,MAAM1B,SACzB6B,EAAKG,SAAS,CACZhC,SAAUmC,IAEU,KAAbA,GACTN,EAAKG,SAAS,CACZlC,QAAS,aAGb+B,EAAKO,mBAIPF,YAAc,WACZL,EAAKG,SAAS,CACZjC,MAAO,EACPC,SAAU6B,EAAKH,MAAM1B,SACrBF,QAAS,SACT8B,QAAS,KAEXC,EAAKO,mBAIPA,cAAgB,WACd,IAAIC,EAAgBrB,EAAaW,GACjCE,EAAKG,SAAS,CACZL,WAAYU,wFAjDdrB,EAAaW,oCAsDN,IAAAW,EAAAC,KACP,OACE/C,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC8C,EAAD,CACA3C,MAAM,cAAcC,QAASyC,KAAKzC,QAASC,MAAOwC,KAAKb,MAAM3B,MAAOC,SAAUuC,KAAKb,MAAM1B,WACzFR,EAAAC,EAAAC,cAAC+C,EAAD,CAAQ5B,GAAG,eAAeC,GAAG,6EAC7BtB,EAAAC,EAAAC,cAACgD,EAAD,KACGH,KAAKb,MAAMC,WAAWgB,IAAI,SAAAC,GAAS,OAClCpD,EAAAC,EAAAC,cAACmD,EAAD,CACEC,gBAAiBR,EAAKQ,gBACtB3C,GAAIyC,EAAUzC,GACd4C,IAAKH,EAAUzC,GACfM,MAAOmC,EAAUnC,MACjBJ,YAAaiC,EAAKjC,YAClB0B,YAAaO,EAAKP,YAClBG,YAAaI,EAAKJ,YAClBE,cAAeE,EAAKF,mBAI1B5C,EAAAC,EAAAC,cAACsD,EAAD,6BArFUC,aCREC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhE,EAAAC,EAAAC,cAAC+D,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.a694de4d.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Nav.css\";\n\nconst Nav = props =>\n<nav className=\"navbar\">\n<ul>\n    <li className=\"brand\"><a href=\"/\">{props.brand}</a></li>\n    <li className=\"headliner\">{props.winLose}</li>\n    <li className=\"score\">Score: {props.score} | Top Score: {props.topScore}</li>\n</ul>\n\n</nav>;\n\nexport default Nav;\n","import React from \"react\";\nimport \"./CharacterCard.css\";\n\nconst CharacterCard = props => (\n  <div className=\"card\" value={props.id}\n  onClick={() => props.handleClick(props.id)}>\n    <div className=\"img-container\">\n      <img alt={props.name} src={props.image} />\n    </div>\n  </div>\n);\n\nexport default CharacterCard;\n","import React from \"react\";\nimport \"./Container.css\";\n\nconst Container = props => <div className=\"container\">{props.children}</div>;\n\nexport default Container;\n","import React from \"react\";\nimport \"./Header.css\";\n\nconst Header = props =>\n<header className=\"header\">\n<h1>{props.h1}</h1>\n<h2>{props.h2}</h2>\n</header>\n\nexport default Header;\n","import React from \"react\";\nimport \"./Footer.css\";\n\nconst Footer = props =>\n<footer className=\"footer\">\n<div className=\"bottom\">{props.children}\n<img alt={props.alt} src={props.src}></img>\n</div>\n</footer>\n\nexport default Footer;\n","import React, { Component } from \"react\";\nimport Nav from \"./components/Nav\";\nimport CharacterCard from \"./components/CharacterCard\";\nimport Container from \"./components/Container\";\nimport Header from \"./components/Header\";\nimport characters from \"./characters.json\";\nimport Footer from \"./components/Footer\";\nimport \"./App.css\";\n\n\n// Shuffle (randomization) function of characters.\nfunction shuffleCards(array) {\n  for (let i = array.length - 1; i > 0; i--) {\n    let j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n  return array;\n};\n\n\nclass App extends Component {\n  state = {\n    characters,\n    score: 0,\n    topScore: 0,\n    clicked: [],\n    winLose: \"\"\n  };\n\n  // Initializes shuffle of cards upon loading of the componenet (the page)\n  componentDidMount() {\n    shuffleCards(characters);\n  }\n\n  // Event handler for clicking on card\n  handleClick = id => {\n    if (this.state.clicked.indexOf(id) === -1) {\n      this.handleScore();\n      this.setState({\n        clicked: this.state.clicked.concat(id)\n      });\n    } else {\n      this.handleReset();\n    }\n  };\n\n  // Function for keeping score until a max of 12 available cards are clicked.\n  handleScore = () => {\n    const newScore = this.state.score + 1;\n    this.setState({\n      score: newScore,\n      winLose: \"\"\n    });\n    if (newScore >= this.state.topScore) {\n      this.setState({\n        topScore: newScore\n      });\n    } else if (newScore === 12) {\n      this.setState({\n        winLose: \"WooHoo!!\"\n      });\n    }\n    this.handleShuffle();\n  };\n\n  // Function to reset the game if a lose occures, resets score to zero.\n  handleReset = () => {\n    this.setState({\n      score: 0,\n      topScore: this.state.topScore,\n      winLose: \"D'OH!!\",\n      clicked: []\n    });\n    this.handleShuffle();\n  };\n\n  //shuffles the cards on page\n  handleShuffle = () => {\n    let shuffledCards = shuffleCards(characters);\n    this.setState({\n      characters: shuffledCards\n    });\n  };\n\n  // Map over this.state.characters and render a CharacterCard component for each character object\n  render() {\n    return (\n      <div>\n        <Nav \n        brand=\"Clicky Game\" winLose={this.winLose} score={this.state.score} topScore={this.state.topScore} />\n        <Header h1=\"Clicky Game!\" h2=\"Click on an image to earn points, but don't click on any more than once!\" />\n        <Container>\n          {this.state.characters.map(character => (\n            <CharacterCard\n              removeCharacter={this.removeCharacter}\n              id={character.id}\n              key={character.id}\n              image={character.image}\n              handleClick={this.handleClick}\n              handleScore={this.handleScore}\n              handleReset={this.handleReset}\n              handleShuffle={this.handleShuffle}\n            />\n            ))}\n        </Container>\n        <Footer>\n          Clicky Game!\n        </Footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}